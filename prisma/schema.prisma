// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL_DEVELOPMENT")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Website {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    url       String
    subUrl    String
}

// model StoryItem {
//     id             Int          @id @default(autoincrement())
//     photoUrl       String
//     title          String
//     text           String
//     homePageItemId Int
//     homePageItem   HomePageItem @relation(fields: [homePageItemId], references: [id])

//     @@index([homePageItemId])
// }

// model HomePageItem {
//     id        Int         @id @default(autoincrement())
//     websiteId String
//     title     String
//     textBlock String
//     photoUrl  String
//     gifUrl    String
//     story     StoryItem[]
// }

model User {
    id             String @id
    websiteUrl     String @db.VarChar(255)
    email          String @unique @db.VarChar(255)
    groomFirstName String
    groomLastName  String
    brideFirstName String
    brideLastName  String
}

model Household {
    id        String   @id @default(uuid())
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    address1  String?
    address2  String?
    city      String?
    state     String?
    zipCode   String?
    country   String?
    phone     String?
    email     String?
    notes     String?
    gifts     Gift[]   @relation(name: "Household_Gifts")
    guests    Guest[]  @relation(name: "Household_Guests")
}

model Gift {
    householdId String
    household   Household @relation(name: "Household_Gifts", fields: [householdId], references: [id], onDelete: Cascade)
    eventId     String
    event       Event     @relation(name: "Event_Gifts", fields: [eventId], references: [id], onDelete: Cascade)
    description String?
    thankyou    Boolean   @default(false)

    @@id(name: "GiftId", [householdId, eventId])
    @@index([householdId])
    @@index([eventId])
}

model Guest {
    id               Int          @id @default(autoincrement())
    firstName        String
    lastName         String
    householdId      String
    userId           String
    isPrimaryContact Boolean
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    household        Household    @relation(name: "Household_Guests", fields: [householdId], references: [id], onDelete: Cascade)
    invitations      Invitation[] @relation(name: "Guest_Invitation")

    @@index([householdId])
}

model Event {
    id          String       @id @default(uuid())
    name        String
    date        DateTime?    @db.Date
    startTime   String?
    endTime     String?
    venue       String?
    attire      String?
    description String?
    userId      String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    invitations Invitation[] @relation(name: "Event_Invitation")
    gifts       Gift[]       @relation(name: "Event_Gifts")
    // subEvents   SubEvent[]   @relation(name: "Event_SubEvent")
}

// model SubEvent {
//     id          String    @id @default(uuid())
//     name        String
//     date        DateTime? @db.Date
//     startTime   String?
//     endTime     String?
//     venue       String?
//     attire      String?
//     description String?
//     eventId     String
//     event       Event     @relation(name: "Event_SubEvent", fields: [eventId], references: [id], onDelete: Cascade)

//     @@index([eventId])
// }

model Invitation {
    guest     Guest?   @relation(name: "Guest_Invitation", fields: [guestId], references: [id], onDelete: Cascade)
    guestId   Int
    event     Event?   @relation(name: "Event_Invitation", fields: [eventId], references: [id], onDelete: Cascade)
    eventId   String
    invitedAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    rsvp      String?
    userId    String

    @@id(name: "invitationId", [guestId, eventId])
    @@index([guestId])
    @@index([eventId])
}
